Variables : 
*************************
a variable is a user-defined or a user-readable custom name assigned
 to a memory location.
 
 variable naming Convention : 
 
It should start with a lowercase letter such as id, name.
It should not start with the special characters like & (ampersand), $ (dollar), _ (underscore).
If the name contains multiple words, start it with the lowercase letter followed by an uppercase letter such as firstName, lastName.
Avoid using one-character variables such as x, y, z.

Rules : 
A variable name can consist of Capital letters A-Z, 
lowercase letters a-z digits 0-9, and two special characters
 such as _ underscore and $ dollar sign. The first character
  must not be a digit. Blank spaces cannot be used in variable
   names. Java keywords cannot be used as variable names.
   
 ************************************************
 Datatypes : 
 ***********************************************
 byte	0		1 byte   2^7 - 1 to -2^7 : 127 to -128 
 short	0		2 byte   2^15 -1 to -2^15 : 32767 to -32768
 int 	0		4 byte   
 long	0		8 byte
 
 float	0.0		4 byte
 double	0.0		8 byte
 
 char	0.0		2 byte
 boolean false	1 bit

8 bit = 1 byte
1024 byte = 1 kb
1024 kb   = 1 mb
1024 mb  = 1 gb
1024 gb = 1tb 
 
 Datat5ype casting : 
 convert one type of data into another type
 -widning / implicite
 -nerrowing / explicite
 
 ********************************
 Oprators : 
 *******************************
Arithmatic : 
+,-,*,/,%

Unary :
++pre,--pre, post++, post--

Relational : 
==,<,>,<=,>=, !=

Logical : 
&&, ||

Turnary : 

coditon ? true : false

*******************************************
Statemetns : 
******************
condtional : 
if-else
switch-case

looping : 
for
while
do-whie

****************************
array 
**********************************
OOPs : 

class
object
inheritance
encaptulation
abstraction
polymorphism


*****************
class  : logical entity


object : real time entity

state / variables / data memebr
behaviour / method / function memeber

method : 

accessModifer returnType* methodName*(args)
{
	//body
}

Data member and function member can be of two types 
static : create single copy in memory
non static : create copy as per object


***********************
Imp classes

String
String bufeer
String builder
Object
Wrapper

**************************
exeption handling
**********************
abnormal condition accures during executio of program 

compiletime exeption
runtime exeption

file io
*********************************
file input and file output

Stream = flow of data

byte
FileInputStream
FileOutputStream

char
FileWrite
FileReader

multithreading
collection















 
 
 
 
 
 
  